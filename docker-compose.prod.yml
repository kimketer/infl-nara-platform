version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: inflnara-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-inflnara}
      POSTGRES_USER: ${DATABASE_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - inflnara-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME:-postgres} -d ${DATABASE_NAME:-inflnara}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: inflnara-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - inflnara-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NestJS Backend API
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile.prod
      args:
        NODE_ENV: production
    container_name: inflnara-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME:-inflnara}
      DATABASE_USERNAME: ${DATABASE_USERNAME:-postgres}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_URL: postgresql://${DATABASE_USERNAME:-postgres}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME:-inflnara}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: ${REDIS_DB:-0}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/${REDIS_DB:-0}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-30d}
      PORT: 3000
      CORS_ORIGIN: ${CORS_ORIGIN}
      LINKPRICE_API_KEY: ${LINKPRICE_API_KEY}
      LINKPRICE_API_SECRET: ${LINKPRICE_API_SECRET}
      LINKPRICE_BASE_URL: ${LINKPRICE_BASE_URL}
      BITLY_API_KEY: ${BITLY_API_KEY}
      BITLY_BASE_URL: ${BITLY_BASE_URL}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      SENDGRID_FROM_EMAIL: ${SENDGRID_FROM_EMAIL}
      SENDGRID_FROM_NAME: ${SENDGRID_FROM_NAME}
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL}
      SLACK_DEFAULT_CHANNEL: ${SLACK_DEFAULT_CHANNEL}
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_ENVIRONMENT: ${SENTRY_ENVIRONMENT:-production}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      BCRYPT_SALT_ROUNDS: ${BCRYPT_SALT_ROUNDS:-12}
      RATE_LIMIT_TTL: ${RATE_LIMIT_TTL:-60}
      RATE_LIMIT_LIMIT: ${RATE_LIMIT_LIMIT:-100}
      SESSION_SECRET: ${SESSION_SECRET}
      DEFAULT_INFLUENCER_COMMISSION_RATE: ${DEFAULT_INFLUENCER_COMMISSION_RATE:-70}
      DEFAULT_PLATFORM_COMMISSION_RATE: ${DEFAULT_PLATFORM_COMMISSION_RATE:-30}
      MIN_SETTLEMENT_AMOUNT: ${MIN_SETTLEMENT_AMOUNT:-10000}
      MAX_CAMPAIGN_DURATION_DAYS: ${MAX_CAMPAIGN_DURATION_DAYS:-365}
      MIN_CAMPAIGN_BUDGET: ${MIN_CAMPAIGN_BUDGET:-100000}
      MAX_CAMPAIGN_BUDGET: ${MAX_CAMPAIGN_BUDGET:-100000000}
      PERFORMANCE_TRACKING_ENABLED: ${PERFORMANCE_TRACKING_ENABLED:-true}
      CLICK_TRACKING_ENABLED: ${CLICK_TRACKING_ENABLED:-true}
      CONVERSION_TRACKING_ENABLED: ${CONVERSION_TRACKING_ENABLED:-true}
      SETTLEMENT_SCHEDULE_CRON: ${SETTLEMENT_SCHEDULE_CRON:-"0 9 * * 1"}
      PERFORMANCE_SYNC_CRON: ${PERFORMANCE_SYNC_CRON:-"0 */6 * * *"}
      BACKUP_SCHEDULE_CRON: ${BACKUP_SCHEDULE_CRON:-"0 2 * * *"}
      CLEANUP_SCHEDULE_CRON: ${CLEANUP_SCHEDULE_CRON:-"0 3 * * 0"}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DEBUG: ${DEBUG:-false}
      ENABLE_SWAGGER: ${ENABLE_SWAGGER:-false}
      ENABLE_GRAPHQL_PLAYGROUND: ${ENABLE_GRAPHQL_PLAYGROUND:-false}
      DEPLOYMENT_ENVIRONMENT: ${DEPLOYMENT_ENVIRONMENT:-production}
      DEPLOYMENT_REGION: ${DEPLOYMENT_REGION:-ap-northeast-2}
      DEPLOYMENT_VERSION: ${DEPLOYMENT_VERSION:-v1.0.0}
      ROLLBACK_ENABLED: ${ROLLBACK_ENABLED:-true}
      HEALTH_CHECK_ENDPOINT: ${HEALTH_CHECK_ENDPOINT:-/health}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "3000:3000"
    networks:
      - inflnara-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Next.js Frontend
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile.prod
      args:
        NODE_ENV: production
    container_name: inflnara-web
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-https://api.inflnara.com}
      NEXT_PUBLIC_APP_NAME: ${NEXT_PUBLIC_APP_NAME:-Inflnara}
      NEXT_PUBLIC_APP_VERSION: ${NEXT_PUBLIC_APP_VERSION:-1.0.0}
      NEXT_PUBLIC_SUPPORT_EMAIL: ${NEXT_PUBLIC_SUPPORT_EMAIL:-support@inflnara.com}
      NEXT_PUBLIC_GA_ID: ${NEXT_PUBLIC_GA_ID}
      NEXT_PUBLIC_GA_MEASUREMENT_ID: ${NEXT_PUBLIC_GA_MEASUREMENT_ID}
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_ENVIRONMENT: ${SENTRY_ENVIRONMENT:-production}
      PORT: 3000
    volumes:
      - ./logs:/app/logs
    ports:
      - "3001:3000"
    networks:
      - inflnara-network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: inflnara-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/letsencrypt:ro
      - ./nginx/www:/var/www/certbot
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    networks:
      - inflnara-network
    depends_on:
      - api
      - web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: inflnara-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - inflnara-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: inflnara-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3002:3000"
    networks:
      - inflnara-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: inflnara-certbot
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email admin@inflnara.com --agree-tos --no-eff-email -d inflnara.com -d www.inflnara.com
    networks:
      - inflnara-network
    depends_on:
      - nginx

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: inflnara-backup
    restart: "no"
    environment:
      PGPASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - ./backup:/backup
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - inflnara-network
    depends_on:
      - postgres
    command: ["/bin/sh", "-c", "chmod +x /backup.sh && /backup.sh"]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  inflnara-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 